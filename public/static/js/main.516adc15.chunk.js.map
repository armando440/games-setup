{"version":3,"sources":["UpsertGame.js","Game.js","CreateGame.js","Games.js","App.js","serviceWorker.js","index.js"],"names":["UpsertGame","state","title","props","game","developer","mode","handleSubmit","event","preventDefault","fetch","process","_id","method","headers","body","JSON","stringify","then","response","json","data","console","log","toggleForm","refresh","handleChange","setState","target","name","value","onSubmit","this","type","placeholder","onChange","React","Component","Game","eraseGame","useState","update","setUpdate","onClick","class","className","CreateGame","Games","getGames","games","bind","id","displayGames","map","key","deleteGame","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.516adc15.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class UpsertGame extends React.Component {\n    state = {\n        title: this.props.game.title,\n        developer: this.props.game.developer,\n        mode: this.props.game.mode\n    } \n     handleSubmit = (event) => {\n        event.preventDefault(); \n        const api_url = process.env.REACT_APP_API_URL;\n        fetch(`${api_url}/games/${this.props.game._id}`, {\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(this.state)\n        }) .then(response => response.json())\n          .then(data => console.log(data))\n          .then(this.props.toggleForm)\n        .then(this.props.refresh)\n    }\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n    render(){\n         return (\n             <form onSubmit={this.handleSubmit}>\n                 <input name=\"title\"\n                    type=\"text\"\n                    placeholder=\"Title\"\n                    value={this.state.title}\n                    onChange={this.handleChange}/>\n                 <input name=\"developer\"\n                     type=\"text\"\n                     placeholder=\"developer\"\n                     value={this.state.developer}\n                     onChange={this.handleChange}/>\n                  <input type=\"submit\" value=\"Update Game\"/>\n             </form>\n         )\n    }\n}\n\n","import React, { useState }  from 'react'\nimport UpsertGame from './UpsertGame'\n\nconst Game = ({game, eraseGame, refresh}) =>{\nconst [update, setUpdate] = useState(false);\nconst toggleForm = () => setUpdate(!update);\nreturn (\n    <li>\n        {game.title}\n       \n         <i  onClick={() => toggleForm()}\n         class=\"glyphicon glyphicon-user\"></i>\n        \n\n        <button className=\"del-btn\"\n        onClick={() => eraseGame(game._id, refresh)}> \n            x\n        </button>\n        \n        {update ? \n         <UpsertGame game={game}\n         toggleForm={toggleForm}\n         refresh={refresh}/>  \n         : ''}\n    </li>\n   )\n}\n\nexport default Game\n\n\n\n","import React from 'react';\n\nexport default class CreateGame extends React.Component {\n    state = {\n        title: \"\",\n        developer: \"\",\n        mode: \"\",\n    } \n     handleSubmit = (event) => {\n        event.preventDefault(); \n        const api_url = process.env.REACT_APP_API_URL;\n        fetch(`${api_url}/games`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(this.state)\n        }) .then(response => response.json())\n          .then(data => console.log(data))\n          .then(() => {\n              this.setState({\n                title: \"\",\n                developer: \"\",\n                mode: \"\"\n              })\n          }).then(this.props.refresh)\n    }\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n    render(){\n         return (\n             <form onSubmit={this.handleSubmit}>\n                 <input name=\"title\"\n                    type=\"text\"\n                    placeholder=\"Title\"\n                    value={this.state.title}\n                    onChange={this.handleChange}/>\n                 <input name=\"developer\"\n                     type=\"text\"\n                     placeholder=\"developer\"\n                     value={this.state.developer}\n                     onChange={this.handleChange}/>\n                  <input type=\"submit\" value=\"Add Game\"/>\n             </form>\n         )\n    }\n}\n//40\n","import React from 'react';\nimport Game from './Game';\nimport CreateGame from './CreateGame';\n\nclass Games extends React.Component {\n    constructor(props){\n    super(props);\n        this.state = {\n            games: []\n        }\n        this.getGames = this.getGames.bind(this);\n    }\n    //track state\n   \n    //componentDidMount() calls a function to fetch()\n    getGames = () => {\n        const api_url = process.env.REACT_APP_API_URL;\n        fetch(`${api_url}/games`)\n          .then(response => response.json())\n          .then(data => this.setState({games:data}))\n    }\n    componentDidMount(){\n        this.getGames();\n    }\n    deleteGame(id, refresh) {\n        const api_url = process.env.REACT_APP_API_URL;\n        fetch(`${api_url}/games/${id}`,{\n            method: \"DELETE\"\n        }).then(response => response.json())\n          .then( data => {\n              console.log(data);\n              refresh();\n          })\n        }      \n          \n    \n    //render list of games \n    render() {\n        const displayGames = this.state.games.map(game => \n        <Game\n             key={game._id} \n             game={game}\n             eraseGame={this.deleteGame}\n             refresh={this.getGames}/>\n             );\n        return (\n            <>\n                <CreateGame refresh={this.getGames}/>\n                 <ul>\n                  {displayGames}\n                </ul>\n            </>\n        )\n    }\n\n}\n\nexport default Games;\n","import React from 'react';\nimport './App.css';\nimport Games from './Games'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Games</h2>\n      <Games/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}